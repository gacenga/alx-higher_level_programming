#!/usr/bin/python3


"""defines fucntion matrix_divided"""


def matrix_divided(matrix, div):
    """dvides matrice elements by integer or float div

    args:
        matrix:the matrix whose elements are to be divided
        div:the float or integer the elements will be divided by

    Returns:
        new matrix of the solutions for the division

    Raises:
        TypeError if the matrix is not a list of lists of int or floats
        or if div is not an int or float or if each row is not of same size
        ZeroDivisionError if div is zero
    """
    if not isinstance(matrix, list):
        raise \
            TypeError\
            ("matrix must be a matrix (list of lists) of integers/floats")

    if not isinstance(div, (int, float)):
        raise TypeError("div must be a number")

    if any(not isinstance(row, list) for row in matrix):
        raise \
            TypeError\
("matrix must be a matrix (list of lists) of integers/floats")

    for row in matrix:
        if any(not isinstance(elem, (int, float)) for elem in row):
            raise \
                TypeError\
                ("matrix must be a matrix (list of lists) of integers/floats")

    if any(len(row) != len(matrix[0]) for row in matrix):
        raise TypeError("Each row of the matrix must have the same size")

    if div == 0:
        raise ZeroDivisionError("division by zero")
    matrix_b = [[0 for _ in range(len(matrix[0]))] for _ in range(len(matrix))]
    for j in range(len(matrix)):
        for i in range(len(matrix[j])):
            matrix_b[j][i] = round(matrix[j][i] / div, 2)
    return matrix_b
